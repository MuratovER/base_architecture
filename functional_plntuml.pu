@startuml
participant FrontEnd
participant BackEnd
database SQL


note left BackEnd: общие функции для всех ролей на всех экрана

== Получение пользователя ==
FrontEnd -> BackEnd: HTTP GET: request_user
BackEnd -> SQL: PSQL: get_user
SQL --> BackEnd: PSQL: user
BackEnd --> FrontEnd: HTTP: 200 OK [user]

alt user not found
    FrontEnd -> BackEnd: HTTP GET: request_user
    BackEnd -> SQL: PSQL: get_user
    SQL --> BackEnd: PSQL: None
    BackEnd --> FrontEnd: HTTP: 400 BadRequest:request_user[ObjectDoesNotExist]
end

== Выход пользователя ==
FrontEnd -> BackEnd: HTTP POST: logout
BackEnd --> FrontEnd: HTTP: 200 OK

== Аутентификация пользователя email/password ==
FrontEnd -> BackEnd: HTTP POST: login_by_jwt
BackEnd -> SQL: PSQL: get user
SQL --> BackEnd: PSQL: user
BackEnd -> BackEnd: create_access_token
BackEnd -> BackEnd: create_refresh_token
BackEnd --> FrontEnd: HTTP: 200 OK [Отправлены acces и refresh токены]
alt incorrect email or password
FrontEnd -> BackEnd: HTTP POST: login_by_jwt
BackEnd -> SQL: PSQL: get user
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP: 400 BadRequest [Incorrect email or password]
end

== Аутентификация польователя через gmail == 
FrontEnd -> BackEnd: HTTP POST: login_by_gmail
BackEnd --> FrontEnd: HTTP: 200 OK
alt incorrect email or password
FrontEnd -> BackEnd: HTTP POST: login_by_gmail
BackEnd --> FrontEnd: HTTP: 400 BadRequest "Incorrect email"
end

== Общие ошибки == 
group Exeptions
alt user not authenticated
    FrontEnd -> BackEnd: HTTP GET: request_user
    BackEnd --> FrontEnd: HTTP: 401 Unathorized
    note left BackEnd: Юзер не авторизовался
end
alt object not found
    FrontEnd -> BackEnd: HTTP GET: request_any_object
    BackEnd -> SQL: PSQL: get object
    SQL --> BackEnd: PSQL: None
    BackEnd --> FrontEnd: HTTP 400 BadRequest [ObjectDoesNotExist]
end
end

note left BackEnd: сотрудник

== Получить активную оценку ==
FrontEnd -> BackEnd: HTTP GET: get_review
alt Получить оценку
BackEnd -> BackEnd: get_my_review
alt Ecли есть список моих запросов
BackEnd -> SQL: PSQL: get my review
SQL --> BackEnd: PSQL: my review
BackEnd -> BackEnd: get_review_request
alt Если есть список запросов фидбека
BackEnd -> SQL: PSQL: get review request
SQL --> BackEnd: PSQL: review request
BackEnd --> FrontEnd: HTTP 200 OK [Получена активная оценка]
else Если списка запросов фидбека нет
BackEnd -> SQL: PSQL: get review request
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP 400 Bad Request [Нет списка запросов фидбека]
end
else Нет списка моих фидбеков
BackEnd -> SQL: PSQL: get my review
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP 400 Bad Request [Нет списка моих фидбеков]
end

else Нет оценки
BackEnd -> SQL: PSQL: get review
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP  400 Bad Request [Нет оценки]
end

== Получить список пользователей, которым я могу отправить запрос на фидбэк == 
FrontEnd ->  BackEnd: HTTP GET: get_users_list 
BackEnd -> SQL: PSQL: get users
SQL --> BackEnd: PSQL: users
BackEnd --> FrontEnd: HTTP: 200 OK [Отправлен список пользователей]

== Создать запроса фидбека ==
FrontEnd -> BackEnd: HTTP POST: create_review
BackEnd -> SQL: PSQL: create review
SQL --> BackEnd: PSQL: review created
BackEnd --> FrontEnd: HTTP: 201 Created [Был создан review]

== Получить список моих фидбэков (вопросы - ответы) ==
FrontEnd -> BackEnd: HTTP GET: get_my_review
BackEnd -> SQL: PSQL: get my feedback
SQL --> BackEnd: PSQL: my feedback
BackEnd --> FrontEnd: HTTP: 200 OK [Отправлен список фидбеков пользователя]

== Получить список запросов фидбэка, которые прислали мне ==
FrontEnd -> BackEnd: HTTP GET: get_review_request
BackEnd -> SQL: PSQL: get feedback
SQL --> BackEnd: PSQL: feedback
BackEnd --> FrontEnd: HTTP: 200 OK [Отправлен список запросов фидбэка]

== Получить список вопросов по запросу фидбэка == 
FrontEnd -> BackEnd: HTTP GET: get_questions_by_review
BackEnd -> SQL: PSQL: get questions
SQL --> BackEnd: PSQL: questions
BackEnd --> FrontEnd: HTTP: 200 OK

== Сохринть фидбэк в draft == 
FrontEnd -> BackEnd: HTTP POST: save_review_as_draft
BackEnd -> SQL: PSQL: review is draft
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP: 201 Created

== Отправить фидбэк == 
FrontEnd -> BackEnd: HTTP POST: save_review
BackEnd -> SQL: PSQL: save review
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP: 201 Created

== Я не работал с ним ==
FrontEnd -> BackEnd: HTTP DELETE: delete_user_from_review
BackEnd ->x SQL: PSQL: delete user
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP 200 OK

note across: Лид, ментор, админ
== Поулчить список запросов фидбэка пользователей в зависимости от роли ==
FrontEnd -> BackEnd: HTTP GET: get_review_request
BackEnd -> SQL: PSQL: get review
SQL --> BackEnd: PSQL: review
BackEnd -> SQL: PSQL: get users
SQL --> BackEnd: PSQL: users
BackEnd -> BackEnd: users.annotate(count(User review))
BackEnd --> FrontEnd: HTTP 200 OK [Users]

== Получить список фидбэков с ответами по каждому ответившему пользователю ==
FrontEnd -> BackEnd: HTTP GET: get_users
BackEnd -> SQL: PSQL: get users
SQL --> BackEnd: PSQL: users
BackEnd -> BackEnd: filter_and_flag_user_by_role
BackEnd --> FrontEnd: HTTP 200 OK [List of users with flags]

FrontEnd -> BackEnd: HTTP GET: get_templates
BackEnd -> SQL: PSQL: get templates
SQL --> BackEnd: PSQL: templates

FrontEnd -> BackEnd: HTTP POST: save_review
BackEnd -> SQL: PSQL: save review
SQL --> BackEnd: PSQL: None
BackEnd --> FrontEnd: HTTP 201 Created

== Создать шаблон ==
FrontEnd -> BackEnd: HTTP POST: create_template
BackEnd -> SQL: PSQL: create template
SQL --> BackEnd: None
BackEnd --> FrontEnd: HTTP 201 Created

== Изменить шаблон == 
FrontEnd -> BackEnd: HTTP GET: get_templates
BackEnd -> SQL: get templates
SQL --> BackEnd: templates
BackEnd --> FrontEnd: HTTP 200 OK [templates]

FrontEnd -> BackEnd: HTTP PUT/PATCH: updated_template
BackEnd -> SQL: update template
SQL --> BackEnd: None
BackEnd --> FrontEnd: HTTP 200 OK [Template was updated]

note across: Админ

== Получить список всех пользователей ==
FrontEnd -> BackEnd: HTTP GET: get_all_users
alt Пользователь имеет права администратора
BackEnd -> SQL: PSQL get users
SQL --> BackEnd: PSQL users
BackEnd --> FrontEnd: HTTP 200 OK [Users]
else Пользователь не имеет прав администратора 
BackEnd --> FrontEnd: HTTP 403 ForbiddenError 
end

== Получить пользователя для редактирования ==
FrontEnd -> BackEnd: HTTP GET: get_user
alt Пользователь имеет права администратора
BackEnd -> SQL: PSQL get user
SQL --> BackEnd: PSQL user
BackEnd --> FrontEnd: HTTP 200 OK [User]
else Пользователь не имеет прав администратора 
BackEnd --> FrontEnd: HTTP 403 ForbiddenError 
end

== Сохранить пользователя == 
FrontEnd -> BackEnd: HTTP PUT/PATCH: update_user
alt Пользователь имеет права администратора
BackEnd -> SQL: PSQL updated user
SQL --> BackEnd: PSQL None
BackEnd --> FrontEnd: HTTP 200 OK [User updated]
else Пользователь не имеет прав администратора 
BackEnd --> FrontEnd: HTTP 403 ForbiddenError 
end

@enduml